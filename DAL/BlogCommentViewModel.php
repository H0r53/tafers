<?php

/*
Author:			This code was generated by DALGen Web available at https://dalgen.opendevtools.org
Date:			11/01/2019
Description:		Creates the BlogCommentViewModel class with methods for interacting with respective stored procedures

*/

class BlogCommentViewModel {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $blogId;
	protected $blogCommentId;
	protected $blogCommentUsername;
	protected $blogCommentImgUrl;
	protected $blogCommentDate;
	protected $blogCommentMessage;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();

		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 6:
				self::__constructFull($argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5]);
		}
	}


	public function __constructBase() {
		$this->blogId = 0;
		$this->blogCommentId = 0;
		$this->blogCommentUsername = '';
		$this->blogCommentImgUrl = '';
		$this->blogCommentDate = '';
		$this->blogCommentMessage = '';
	}

	public function __constructPK($paramId) {
		$this->load($paramId);
	}

	public function __constructFull($paramBlogId, $paramBlogCommentId, $paramBlogCommentUsername, $paramBlogCommentImgUrl, $paramBlogCommentDate, $paramBlogCommentMessage){
		$this->blogId = $paramBlogId;
		$this->blogCommentId = $paramBlogCommentId;
		$this->blogCommentUsername = $paramBlogCommentUsername;
		$this->blogCommentImgUrl = $paramBlogCommentImgUrl;
		$this->blogCommentDate = $paramBlogCommentDate;
		$this->blogCommentMessage = $paramBlogCommentMessage;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/
	public function getBlogId(){
		return $this->blogId;
	}
	public function setBlogId($value){
		 $this->blogId = $value;
	}
	public function getBlogCommentId(){
		return $this->blogCommentId;
	}
	public function setBlogCommentId($value){
		 $this->blogCommentId = $value;
	}
	public function getBlogCommentUsername(){
		return $this->blogCommentUsername;
	}
	public function setBlogCommentUsername($value){
		 $this->blogCommentUsername = $value;
	}
	public function getBlogCommentImgUrl(){
		return $this->blogCommentImgUrl;
	}
	public function setBlogCommentImgUrl($value){
		 $this->blogCommentImgUrl = $value;
	}
	public function getBlogCommentDate(){
		return $this->blogCommentDate;
	}
	public function setBlogCommentDate($value){
		 $this->blogCommentDate = $value;
	}
	public function getBlogCommentMessage(){
		return $this->blogCommentMessage;
	}
	public function setBlogCommentMessage($value){
		 $this->blogCommentMessage = $value;
	}
    
    public static function loadBlogCommentViewModel($paramBlogId) {
        include(self::getDbSettings());
        $conn = new mysqli($servername, $username, $password, $dbname);
        $stmt = $conn->prepare('CALL usp_ViewModel_LoadBlogCommentViewModel(?)');
        $arg1 = $paramBlogId;
        $stmt->bind_param('i',$arg1);
        $stmt->execute();

        $result = $stmt->get_result();
        if (!$result) die($conn->error);
        if ($result->num_rows > 0) {
            $arr = array();

            while ($row = $result->fetch_assoc()) {
                $item = new BlogCommentViewModel($row['blogId'],$row['commentId'],$row['username'],$row['imgurl'],$row['createDate'],$row['message']);
                $arr[] = $item;
            }
            return $arr;
        }
        else {
            $arr = array();
            return $arr;
        }
    }
}

