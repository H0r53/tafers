<?php
/*
Author:			This code was generated by DALGen Web available at https://dalgen.opendevtools.org
Date:			11/02/2019
Description:		Creates the BlogLike class with methods for interacting with respective stored procedures

*/

class BlogLike {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $blogId;
	protected $userId;
	protected $createDate;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();

		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 3:
				self::__constructFull($argv[0], $argv[1], $argv[2]);
		}
	}


	public function __constructBase() {
		$this->blogId = 0;
		$this->userId = 0;
		$this->createDate = '';
	}

	public function __constructPK($paramId) {
		$this->load($paramId);
	}

	public function __constructFull($paramBlogId, $paramUserId, $paramCreateDate){
		$this->blogId = $paramBlogId;
		$this->userId = $paramUserId;
		$this->createDate = $paramCreateDate;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/
	public function getBlogId(){
		return $this->blogId;
	}
	public function setBlogId($value){
		 $this->blogId = $value;
	}
	public function getUserId(){
		return $this->userId;
	}
	public function setUserId($value){
		 $this->userId = $value;
	}
	public function getCreateDate(){
		return $this->createDate;
	}
	public function setCreateDate($value){
		 $this->createDate = $value;
	}

        /******************************************************************/
        // Static Methods
        /******************************************************************/

        public static function loadall(){
                include(self::getDbSettings());
                $conn = new mysqli($servername, $username, $password, $dbname);
                $stmt = $conn->prepare('CALL usp_BlogLike_LoadAll()');
                $stmt->execute();
                $result = $stmt->get_result();
                if (!$result) die($conn->error);
                $arr = array();
                if ($result->num_rows > 0) {
                        while ($row = $result->fetch_assoc()) {
                                $blog = new Blog($row['blogId'],$row['userId'],$row['createDate']);
                                $arr[] = $blog;
                        }
                }

                return $arr;
        }

        public static function toggle($blogId,$userId) {
                include(self::getDbSettings());
                $conn = new mysqli($servername, $username, $password, $dbname);
                $stmt = $conn->prepare('CALL usp_BlogLike_Toggle(?,?)');
                $arg1 = $blogId;
                $arg2 = $userId;
                $stmt->bind_param('ii',$arg1,$arg2);
                $stmt->execute();
                $result = $stmt->get_result();
                if (!$result) die($conn->error);
        }
}

