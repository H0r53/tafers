<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			6/24/2018
Description:	Creates the DAL class for  SongCommentViewModel table and respective stored procedures

*/



class SongCommentViewModel {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $id;
	protected $songId;
	protected $userId;
	protected $comment;
	protected $commentDate;
	protected $commentId;
	protected $commentUsername;
	protected $commentUserImgUrl;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 8:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7] );
		}
	}


	public function __constructBase() {
		$this->id = 0;
		$this->songId = 0;
		$this->userId = 0;
		$this->comment = "";
		$this->commentDate = "";
		$this->commentId = 0;
		$this->commentUsername = "";
		$this->commentUserImgUrl = "";
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramId,$paramSongId,$paramUserId,$paramComment,$paramCommentDate,$paramCommentId,$paramCommentUsername,$paramCommentUserImgUrl) {
		$this->id = $paramId;
		$this->songId = $paramSongId;
		$this->userId = $paramUserId;
		$this->comment = $paramComment;
		$this->commentDate = $paramCommentDate;
		$this->commentId = $paramCommentId;
		$this->commentUsername = $paramCommentUsername;
		$this->commentUserImgUrl = $paramCommentUserImgUrl;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getId(){
		return $this->id;
	}
	public function setId($value){
		$this->id = $value;
	}
	public function getSongId(){
		return $this->songId;
	}
	public function setSongId($value){
		$this->songId = $value;
	}
	public function getUserId(){
		return $this->userId;
	}
	public function setUserId($value){
		$this->userId = $value;
	}
	public function getComment(){
		return $this->comment;
	}
	public function setComment($value){
		$this->comment = $value;
	}
	public function getCommentDate(){
		return $this->commentDate;
	}
	public function setCommentDate($value){
		$this->commentDate = $value;
	}
	public function getCommentId(){
		return $this->commentId;
	}
	public function setCommentId($value){
		$this->commentId = $value;
	}
	public function getCommentUsername(){
		return $this->commentUsername;
	}
	public function setCommentUsername($value){
		$this->commentUsername = $value;
	}
	public function getCommentUserImgUrl(){
		return $this->commentUserImgUrl;
	}
	public function setCommentUserImgUrl($value){
		$this->commentUserImgUrl = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_SongCommentViewModel_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setId($row['id']);
		 $this->setSongId($row['songId']);
		 $this->setUserId($row['userId']);
		 $this->setComment($row['comment']);
		 $this->setCommentDate($row['commentDate']);
		 $this->setCommentId($row['commentId']);
		 $this->setCommentUsername($row['commentUsername']);
		 $this->setCommentUserImgUrl($row['commentUserImgUrl']);
		}
	}


	public function save() {
		if ($this->getId() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_SongCommentViewModel_Add(?,?,?,?,?,?,?)');
		$arg1 = $this->getSongId();
		$arg2 = $this->getUserId();
		$arg3 = $this->getComment();
		$arg4 = $this->getCommentDate();
		$arg5 = $this->getCommentId();
		$arg6 = $this->getCommentUsername();
		$arg7 = $this->getCommentUserImgUrl();
		$stmt->bind_param('iississ',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_SongCommentViewModel_Update(?,?,?,?,?,?,?,?)');
		$arg1 = $this->getId();
		$arg2 = $this->getSongId();
		$arg3 = $this->getUserId();
		$arg4 = $this->getComment();
		$arg5 = $this->getCommentDate();
		$arg6 = $this->getCommentId();
		$arg7 = $this->getCommentUsername();
		$arg8 = $this->getCommentUserImgUrl();
		$stmt->bind_param('iiississ',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_SongCommentViewModel_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$songCommentViewModel = new SongCommentViewModel($row['id'],$row['songId'],$row['userId'],$row['comment'],$row['commentDate'],$row['commentId'],$row['commentUsername'],$row['commentUserImgUrl']);
				$arr[] = $songCommentViewModel;
			}
			return $arr;
		}
		else {
			return array();
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_SongCommentViewModel_Delete(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramId,$paramSongId,$paramUserId,$paramComment,$paramCommentDate,$paramCommentId,$paramCommentUsername,$paramCommentUserImgUrl) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_SongCommentViewModel_Search(?,?,?,?,?,?,?,?)');
		$arg1 = SongCommentViewModel::setNullValue($paramId);
		$arg2 = SongCommentViewModel::setNullValue($paramSongId);
		$arg3 = SongCommentViewModel::setNullValue($paramUserId);
		$arg4 = SongCommentViewModel::setNullValue($paramComment);
		$arg5 = SongCommentViewModel::setNullValue($paramCommentDate);
		$arg6 = SongCommentViewModel::setNullValue($paramCommentId);
		$arg7 = SongCommentViewModel::setNullValue($paramCommentUsername);
		$arg8 = SongCommentViewModel::setNullValue($paramCommentUserImgUrl);
		$stmt->bind_param('iiississ',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$songCommentViewModel = new SongCommentViewModel($row['id'],$row['songId'],$row['userId'],$row['comment'],$row['commentDate'],$row['commentId'],$row['commentUsername'],$row['commentUserImgUrl']);
				$arr[] = $songCommentViewModel;
			}
			return $arr;
		}
		else {
			return array();
		}
	}
}
