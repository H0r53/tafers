<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			6/8/2018
Description:	Creates the DAL class for  ToDoItem table and respective stored procedures

*/



class ToDoItem {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $id;
	protected $priorityId;
	protected $createdByUserId;
	protected $createDate;
	protected $title;
	protected $summary;
	protected $closedByUserId;
	protected $closedDate;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 8:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6], $argv[7] );
		}
	}


	public function __constructBase() {
		$this->id = 0;
		$this->priorityId = 0;
		$this->createdByUserId = 0;
		$this->createDate = "";
		$this->title = "";
		$this->summary = "";
		$this->closedByUserId = 0;
		$this->closedDate = "";
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramId,$paramPriorityId,$paramCreatedByUserId,$paramCreateDate,$paramTitle,$paramSummary,$paramClosedByUserId,$paramClosedDate) {
		$this->id = $paramId;
		$this->priorityId = $paramPriorityId;
		$this->createdByUserId = $paramCreatedByUserId;
		$this->createDate = $paramCreateDate;
		$this->title = $paramTitle;
		$this->summary = $paramSummary;
		$this->closedByUserId = $paramClosedByUserId;
		$this->closedDate = $paramClosedDate;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getId(){
		return $this->id;
	}
	public function setId($value){
		$this->id = $value;
	}
	public function getPriorityId(){
		return $this->priorityId;
	}
	public function setPriorityId($value){
		$this->priorityId = $value;
	}
	public function getCreatedByUserId(){
		return $this->createdByUserId;
	}
	public function setCreatedByUserId($value){
		$this->createdByUserId = $value;
	}
	public function getCreateDate(){
		return $this->createDate;
	}
	public function setCreateDate($value){
		$this->createDate = $value;
	}
	public function getTitle(){
		return $this->title;
	}
	public function setTitle($value){
		$this->title = $value;
	}
	public function getSummary(){
		return $this->summary;
	}
	public function setSummary($value){
		$this->summary = $value;
	}
	public function getClosedByUserId(){
		return $this->closedByUserId;
	}
	public function setClosedByUserId($value){
		$this->closedByUserId = $value;
	}
	public function getClosedDate(){
		return $this->closedDate;
	}
	public function setClosedDate($value){
		$this->closedDate = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_ToDoItem_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setId($row['id']);
		 $this->setPriorityId($row['priorityId']);
		 $this->setCreatedByUserId($row['createdByUserId']);
		 $this->setCreateDate($row['createDate']);
		 $this->setTitle($row['title']);
		 $this->setSummary($row['summary']);
		 $this->setClosedByUserId($row['closedByUserId']);
		 $this->setClosedDate($row['closedDate']);
		}
	}


	public function save() {
		if ($this->getId() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_ToDoItem_Add(?,?,?,?,?,?,?)');
		$arg1 = $this->getPriorityId();
		$arg2 = $this->getCreatedByUserId();
		$arg3 = $this->getCreateDate();
		$arg4 = $this->getTitle();
		$arg5 = $this->getSummary();
		$arg6 = NULL;
		$arg7 = NULL;
		$stmt->bind_param('iisssis',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_ToDoItem_Update(?,?,?,?,?,?,?,?)');
		$arg1 = $this->getId();
		$arg2 = $this->getPriorityId();
		$arg3 = $this->getCreatedByUserId();
		$arg4 = $this->getCreateDate();
		$arg5 = $this->getTitle();
		$arg6 = $this->getSummary();
		$arg7 = $this->getClosedByUserId();
		$arg8 = $this->getClosedDate();
		$stmt->bind_param('iiisssis',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_ToDoItem_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$toDoItem = new ToDoItem($row['id'],$row['priorityId'],$row['createdByUserId'],$row['createDate'],$row['title'],$row['summary'],$row['closedByUserId'],$row['closedDate']);
				$arr[] = $toDoItem;
			}
			return $arr;
		}
		else {
			return array();
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_ToDoItem_Delete(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramId,$paramPriorityId,$paramCreatedByUserId,$paramCreateDate,$paramTitle,$paramSummary,$paramClosedByUserId,$paramClosedDate) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_ToDoItem_Search(?,?,?,?,?,?,?,?)');
		$arg1 = ToDoItem::setNullValue($paramId);
		$arg2 = ToDoItem::setNullValue($paramPriorityId);
		$arg3 = ToDoItem::setNullValue($paramCreatedByUserId);
		$arg4 = ToDoItem::setNullValue($paramCreateDate);
		$arg5 = ToDoItem::setNullValue($paramTitle);
		$arg6 = ToDoItem::setNullValue($paramSummary);
		$arg7 = ToDoItem::setNullValue($paramClosedByUserId);
		$arg8 = ToDoItem::setNullValue($paramClosedDate);
		$stmt->bind_param('iiisssis',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7,$arg8);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$toDoItem = new ToDoItem($row['id'],$row['priorityId'],$row['createdByUserId'],$row['createDate'],$row['title'],$row['summary'],$row['closedByUserId'],$row['closedDate']);
				$arr[] = $toDoItem;
			}
			return $arr;
		}
		else {
			return array();
		}
	}
}
