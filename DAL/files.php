<?php
/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			11/26/2017
Description:	Creates the DAL class for  files table and respective stored procedures

*/



class Files {

	// This is for local purposes only! In hosted environments the db_settings.php file should be outside of the webroot, such as: include("/outside-webroot/db_settings.php");
	protected static function getDbSettings() { return "DAL/db_localsettings.php"; }

	/******************************************************************/
	// Properties
	/******************************************************************/

	protected $id;
	protected $fileName;
	protected $uploadIP;
	protected $uploadDate;
	protected $fileExtension;
	protected $fileSize;
	protected $fileType;


	/******************************************************************/
	// Constructors
	/******************************************************************/
	public function __construct() {
		$argv = func_get_args();
		switch( func_num_args() ) {
			case 0:
				self::__constructBase();
				break;
			case 1:
				self::__constructPK( $argv[0] );
				break;
			case 7:
				self::__constructFull( $argv[0], $argv[1], $argv[2], $argv[3], $argv[4], $argv[5], $argv[6] );
		}
	}


	public function __constructBase() {
		$this->id = 0;
		$this->fileName = "";
		$this->uploadIP = "";
		$this->uploadDate = "";
		$this->fileExtension = "";
		$this->fileSize = 0;
		$this->fileType = "";
	}


	public function __constructPK($paramId) {
		$this->load($paramId);
	}


	public function __constructFull($paramId,$paramFileName,$paramUploadIP,$paramUploadDate,$paramFileExtension,$paramFileSize,$paramFileType) {
		$this->id = $paramId;
		$this->fileName = $paramFileName;
		$this->uploadIP = $paramUploadIP;
		$this->uploadDate = $paramUploadDate;
		$this->fileExtension = $paramFileExtension;
		$this->fileSize = $paramFileSize;
		$this->fileType = $paramFileType;
	}


	/******************************************************************/
	// Accessors / Mutators
	/******************************************************************/

	public function getId(){
		return $this->id;
	}
	public function setId($value){
		$this->id = $value;
	}
	public function getFileName(){
		return $this->fileName;
	}
	public function setFileName($value){
		$this->fileName = $value;
	}
	public function getUploadIP(){
		return $this->uploadIP;
	}
	public function setUploadIP($value){
		$this->uploadIP = $value;
	}
	public function getUploadDate(){
		return $this->uploadDate;
	}
	public function setUploadDate($value){
		$this->uploadDate = $value;
	}
	public function getFileExtension(){
		return $this->fileExtension;
	}
	public function setFileExtension($value){
		$this->fileExtension = $value;
	}
	public function getFileSize(){
		return $this->fileSize;
	}
	public function setFileSize($value){
		$this->fileSize = $value;
	}
	public function getFileType(){
		return $this->fileType;
	}
	public function setFileType($value){
		$this->fileType = $value;
	}


	/******************************************************************/
	// Public Methods
	/******************************************************************/


	public function load($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_files_Load(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);

		while ($row = $result->fetch_assoc()) {
		 $this->setId($row['id']);
		 $this->setFileName($row['fileName']);
		 $this->setUploadIP($row['uploadIP']);
		 $this->setUploadDate($row['uploadDate']);
		 $this->setFileExtension($row['fileExtension']);
		 $this->setFileSize($row['fileSize']);
		 $this->setFileType($row['fileType']);
		}
	}


	public function save() {
		if ($this->getId() == 0)
			$this->insert();
		else
			$this->update();
	}

	/******************************************************************/
	// Private Methods
	/******************************************************************/



	private function insert() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_files_Add(?,?,?,?,?,?)');
		$arg1 = $this->getFileName();
		$arg2 = $this->getUploadIP();
		$arg3 = $this->getUploadDate();
		$arg4 = $this->getFileExtension();
		$arg5 = $this->getFileSize();
		$arg6 = $this->getFileType();
		$stmt->bind_param('ssssis',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		while ($row = $result->fetch_assoc()) {
			// By default, the DALGen generated INSERT procedure returns the scope identity as id
			$this->load($row['id']);
		}
	}


	private function update() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_files_Update(?,?,?,?,?,?,?)');
		$arg1 = $this->getId();
		$arg2 = $this->getFileName();
		$arg3 = $this->getUploadIP();
		$arg4 = $this->getUploadDate();
		$arg5 = $this->getFileExtension();
		$arg6 = $this->getFileSize();
		$arg7 = $this->getFileType();
		$stmt->bind_param('issssis',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();
	}

	private static function setNullValue($value){
		if ($value == "")
			return null;
		else
			return $value;
	}

	/******************************************************************/
	// Static Methods
	/******************************************************************/



	public static function loadall() {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_files_LoadAll()');
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$files = new Files($row['id'],$row['fileName'],$row['uploadIP'],$row['uploadDate'],$row['fileExtension'],$row['fileSize'],$row['fileType']);
				$arr[] = $files;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}


	public static function remove($paramId) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_files_Remove(?)');
		$stmt->bind_param('i', $paramId);
		$stmt->execute();
	}


	public static function search($paramId,$paramFileName,$paramUploadIP,$paramUploadDate,$paramFileExtension,$paramFileSize,$paramFileType) {
		include(self::getDbSettings());
		$conn = new mysqli($servername, $username, $password, $dbname);
		$stmt = $conn->prepare('CALL usp_files_Search(?,?,?,?,?,?,?)');
		$arg1 = Files::setNullValue($paramId);
		$arg2 = Files::setNullValue($paramFileName);
		$arg3 = Files::setNullValue($paramUploadIP);
		$arg4 = Files::setNullValue($paramUploadDate);
		$arg5 = Files::setNullValue($paramFileExtension);
		$arg6 = Files::setNullValue($paramFileSize);
		$arg7 = Files::setNullValue($paramFileType);
		$stmt->bind_param('issssis',$arg1,$arg2,$arg3,$arg4,$arg5,$arg6,$arg7);
		$stmt->execute();

		$result = $stmt->get_result();
		if (!$result) die($conn->error);
		if ($result->num_rows > 0) {
			$arr = array();
			while ($row = $result->fetch_assoc()) {
				$files = new Files($row['id'],$row['fileName'],$row['uploadIP'],$row['uploadDate'],$row['fileExtension'],$row['fileSize'],$row['fileType']);
				$arr[] = $files;
			}
			return $arr;
		}
		else {
			die("The query yielded zero results.No rows found.");
		}
	}
}
