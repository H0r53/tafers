/*
Author:			This code was generated by DALGen Web available at https://dalgen.opendevtools.org
Date:			11/01/2019
Description:		Creates the Blog table and respective stored procedures

*/

USE tafers;

-- Overwrite existing objects that conflict. 
-- WARNING: To avoid loss of data please prepare a backup if necessary

DROP TABLE IF EXISTS `tafers`.`Blog`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Blog_LoadAll`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Blog_Search`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Blog_Add`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Blog_Load`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Blog_Delete`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Blog_Update`;


-- Create Table 

CREATE TABLE `tafers`.`Blog` (
id INT AUTO_INCREMENT,
createdByUserId INT,
bandId INT,
createDate DATETIME,
message VARCHAR(4096),
CONSTRAINT pk_Blog_id PRIMARY KEY (id),
CONSTRAINT fk_Blog_createdByUserId_User_id FOREIGN KEY (createdByUserId) REFERENCES User (id),
CONSTRAINT fk_Blog_bandId_Band_id FOREIGN KEY (bandId) REFERENCES Band (id)
);


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Blog_Load`
(
	IN paramid INT
)
BEGIN
	SELECT
		`Blog`.`id` AS `id`,
		`Blog`.`createdByUserId` AS `createdByUserId`,
		`Blog`.`bandId` AS `bandId`,
		`Blog`.`createDate` AS `createDate`,
		`Blog`.`message` AS `message`
	FROM `Blog`
	WHERE `Blog`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Blog_LoadAll`
(
)
BEGIN
	SELECT
		`Blog`.`id` AS `id`,
		`Blog`.`createdByUserId` AS `createdByUserId`,
		`Blog`.`bandId` AS `bandId`,
		`Blog`.`createDate` AS `createDate`,
		`Blog`.`message` AS `message`
	FROM `Blog`;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Blog_Add`
(
	IN paramcreatedByUserId INT,
	IN parambandId INT,
	IN paramcreateDate DATETIME,
	IN parammessage VARCHAR(4096)
)
BEGIN
	INSERT INTO `Blog` (createdByUserId,bandId,createDate,message)
	VALUES (paramcreatedByUserId,parambandId,paramcreateDate,parammessage);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Blog_Update`
(
	IN paramid INT,
	IN paramcreatedByUserId INT,
	IN parambandId INT,
	IN paramcreateDate DATETIME,
	IN parammessage VARCHAR(4096)
)
BEGIN
	UPDATE `Blog`
	SET
		createdByUserId = paramcreatedByUserId,
		bandId = parambandId,
		createDate = paramcreateDate,
		message = parammessage
	WHERE 
		id = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Blog_Delete`
(
	IN paramid INT
)
BEGIN
	DELETE FROM `Blog`
	WHERE `Blog`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Blog_Search`
(
	IN paramid INT,
	IN paramcreatedByUserId INT,
	IN parambandId INT,
	IN paramcreateDate DATETIME,
	IN parammessage VARCHAR(4096)
)
BEGIN
	SELECT
		`Blog`.`id` AS `id`,
		`Blog`.`createdByUserId` AS `createdByUserId`,
		`Blog`.`bandId` AS `bandId`,
		`Blog`.`createDate` AS `createDate`,
		`Blog`.`message` AS `message`
	FROM `Blog`
	WHERE 
		COALESCE(`Blog`.`id`,0) = COALESCE(paramid,`Blog`.`id`,0)
		 AND COALESCE(`Blog`.`createdByUserId`,0) = COALESCE(paramcreatedByUserId,`Blog`.`createdByUserId`,0)
		 AND COALESCE(`Blog`.`bandId`,0) = COALESCE(parambandId,`Blog`.`bandId`,0)
		 AND COALESCE(CAST(`Blog`.`createDate` AS DATE),'') = COALESCE(CAST(paramcreateDate AS DATE),CAST(`Blog`.`createDate` AS DATE),CAST(NOW() AS DATE))
		 AND COALESCE(`Blog`.`message`,'') LIKE COALESCE(CONCAT('%', parammessage, '%'),`Blog`.`message`,'');
END //
DELIMITER ;



