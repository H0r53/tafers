/*
Author:			This code was generated by DALGen Web available at https://dalgen.opendevtools.org
Date:			11/01/2019
Description:		Creates the BlogComment table and respective stored procedures

*/

USE tafers;

-- Overwrite existing objects that conflict. 
-- WARNING: To avoid loss of data please prepare a backup if necessary

DROP TABLE IF EXISTS `tafers`.`BlogComment`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_BlogComment_LoadAll`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_BlogComment_Search`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_BlogComment_Add`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_BlogComment_Load`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_BlogComment_Delete`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_BlogComment_Update`;


-- Create Table 

CREATE TABLE `tafers`.`BlogComment` (
id INT AUTO_INCREMENT,
createdByUserId INT,
createDate DATETIME,
blogId INT,
message VARCHAR(1024),
CONSTRAINT pk_BlogComment_id PRIMARY KEY (id),
CONSTRAINT fk_BlogComment_createdByUserId_User_id FOREIGN KEY (createdByUserId) REFERENCES User (id),
CONSTRAINT fk_BlogComment_blogId_Blog_id FOREIGN KEY (blogId) REFERENCES Blog (id)
);


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_BlogComment_Load`
(
	IN paramid INT
)
BEGIN
	SELECT
		`BlogComment`.`id` AS `id`,
		`BlogComment`.`createdByUserId` AS `createdByUserId`,
		`BlogComment`.`createDate` AS `createDate`,
		`BlogComment`.`blogId` AS `blogId`,
		`BlogComment`.`message` AS `message`
	FROM `BlogComment`
	WHERE `BlogComment`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_BlogComment_LoadAll`
(
)
BEGIN
	SELECT
		`BlogComment`.`id` AS `id`,
		`BlogComment`.`createdByUserId` AS `createdByUserId`,
		`BlogComment`.`createDate` AS `createDate`,
		`BlogComment`.`blogId` AS `blogId`,
		`BlogComment`.`message` AS `message`
	FROM `BlogComment`;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_BlogComment_Add`
(
	IN paramcreatedByUserId INT,
	IN paramcreateDate DATETIME,
	IN paramblogId INT,
	IN parammessage VARCHAR(1024)
)
BEGIN
	INSERT INTO `BlogComment` (createdByUserId,createDate,blogId,message)
	VALUES (paramcreatedByUserId,paramcreateDate,paramblogId,parammessage);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_BlogComment_Update`
(
	IN paramid INT,
	IN paramcreatedByUserId INT,
	IN paramcreateDate DATETIME,
	IN paramblogId INT,
	IN parammessage VARCHAR(1024)
)
BEGIN
	UPDATE `BlogComment`
	SET
		createdByUserId = paramcreatedByUserId,
		createDate = paramcreateDate,
		blogId = paramblogId,
		message = parammessage
	WHERE 
		id = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_BlogComment_Delete`
(
	IN paramid INT
)
BEGIN
	DELETE FROM `BlogComment`
	WHERE `BlogComment`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_BlogComment_Search`
(
	IN paramid INT,
	IN paramcreatedByUserId INT,
	IN paramcreateDate DATETIME,
	IN paramblogId INT,
	IN parammessage VARCHAR(1024)
)
BEGIN
	SELECT
		`BlogComment`.`id` AS `id`,
		`BlogComment`.`createdByUserId` AS `createdByUserId`,
		`BlogComment`.`createDate` AS `createDate`,
		`BlogComment`.`blogId` AS `blogId`,
		`BlogComment`.`message` AS `message`
	FROM `BlogComment`
	WHERE 
		COALESCE(`BlogComment`.`id`,0) = COALESCE(paramid,`BlogComment`.`id`,0)
		 AND COALESCE(`BlogComment`.`createdByUserId`,0) = COALESCE(paramcreatedByUserId,`BlogComment`.`createdByUserId`,0)
		 AND COALESCE(CAST(`BlogComment`.`createDate` AS DATE),'') = COALESCE(CAST(paramcreateDate AS DATE),CAST(`BlogComment`.`createDate` AS DATE),CAST(NOW() AS DATE))
		 AND COALESCE(`BlogComment`.`blogId`,0) = COALESCE(paramblogId,`BlogComment`.`blogId`,0)
		 AND COALESCE(`BlogComment`.`message`,'') LIKE COALESCE(CONCAT('%', parammessage, '%'),`BlogComment`.`message`,'');
END //
DELIMITER ;



