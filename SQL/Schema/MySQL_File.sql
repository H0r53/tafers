/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			4/27/2018
Description:	Creates the File table and respective stored procedures

*/


USE tafers;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `tafers`.`File`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_File_Load`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_File_LoadAll`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_File_Add`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_File_Update`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_File_Delete`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_File_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `tafers`.`File` (
id INT AUTO_INCREMENT,
userId INT,
fileName VARCHAR(512),
uploadIP VARCHAR(32),
uploadDate DATETIME,
fileSize INT,
fileExtension VARCHAR(32),
fileType VARCHAR(256),
isPublic INT,
categoryTypeId INT,
CONSTRAINT pk_File_id PRIMARY KEY (id),
CONSTRAINT fk_File_userId_User_id FOREIGN KEY (userId) REFERENCES User (id),
CONSTRAINT fk_File_categoryTypeId_FileCategory_id FOREIGN KEY (categoryTypeId) REFERENCES FileCategory (id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_File_Load`
(
	 IN paramid INT
)
BEGIN
	SELECT
		`File`.`id` AS `id`,
		`File`.`userId` AS `userId`,
		`File`.`fileName` AS `fileName`,
		`File`.`uploadIP` AS `uploadIP`,
		`File`.`uploadDate` AS `uploadDate`,
		`File`.`fileSize` AS `fileSize`,
		`File`.`fileExtension` AS `fileExtension`,
		`File`.`fileType` AS `fileType`,
		`File`.`isPublic` AS `isPublic`,
		`File`.`categoryTypeId` AS `categoryTypeId`
	FROM `File`
	WHERE 		`File`.`id` = paramid;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tafers`.`usp_File_LoadAll`
()
BEGIN
	SELECT
		`File`.`id` AS `id`,
		`File`.`userId` AS `userId`,
		`File`.`fileName` AS `fileName`,
		`File`.`uploadIP` AS `uploadIP`,
		`File`.`uploadDate` AS `uploadDate`,
		`File`.`fileSize` AS `fileSize`,
		`File`.`fileExtension` AS `fileExtension`,
		`File`.`fileType` AS `fileType`,
		`File`.`isPublic` AS `isPublic`,
		`File`.`categoryTypeId` AS `categoryTypeId`
	FROM `File`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tafers`.`usp_File_Add`
(
	 IN paramuserId INT,
	 IN paramfileName VARCHAR(512),
	 IN paramuploadIP VARCHAR(32),
	 IN paramuploadDate DATETIME,
	 IN paramfileSize INT,
	 IN paramfileExtension VARCHAR(32),
	 IN paramfileType VARCHAR(256),
	 IN paramisPublic INT,
	 IN paramcategoryTypeId INT
)
BEGIN
	INSERT INTO `File` (userId,fileName,uploadIP,uploadDate,fileSize,fileExtension,fileType,isPublic,categoryTypeId)
	VALUES (paramuserId, paramfileName, paramuploadIP, paramuploadDate, paramfileSize, paramfileExtension, paramfileType, paramisPublic, paramcategoryTypeId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_File_Update`
(
	IN paramid INT,
	IN paramuserId INT,
	IN paramfileName VARCHAR(512),
	IN paramuploadIP VARCHAR(32),
	IN paramuploadDate DATETIME,
	IN paramfileSize INT,
	IN paramfileExtension VARCHAR(32),
	IN paramfileType VARCHAR(256),
	IN paramisPublic INT,
	IN paramcategoryTypeId INT
)
BEGIN
	UPDATE `File`
	SET userId = paramuserId
		,fileName = paramfileName
		,uploadIP = paramuploadIP
		,uploadDate = paramuploadDate
		,fileSize = paramfileSize
		,fileExtension = paramfileExtension
		,fileType = paramfileType
		,isPublic = paramisPublic
		,categoryTypeId = paramcategoryTypeId
	WHERE		`File`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_File_Delete`
(
	IN paramid INT
)
BEGIN
	DELETE FROM `File`
	WHERE		`File`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_File_Search`
(
	IN paramid INT,
	IN paramuserId INT,
	IN paramfileName VARCHAR(512),
	IN paramuploadIP VARCHAR(32),
	IN paramuploadDate DATETIME,
	IN paramfileSize INT,
	IN paramfileExtension VARCHAR(32),
	IN paramfileType VARCHAR(256),
	IN paramisPublic INT,
	IN paramcategoryTypeId INT
)
BEGIN
	SELECT
		`File`.`id` AS `id`,
		`File`.`userId` AS `userId`,
		`File`.`fileName` AS `fileName`,
		`File`.`uploadIP` AS `uploadIP`,
		`File`.`uploadDate` AS `uploadDate`,
		`File`.`fileSize` AS `fileSize`,
		`File`.`fileExtension` AS `fileExtension`,
		`File`.`fileType` AS `fileType`,
		`File`.`isPublic` AS `isPublic`,
		`File`.`categoryTypeId` AS `categoryTypeId`
	FROM `File`
	WHERE
		COALESCE(File.`id`,0) = COALESCE(paramid,File.`id`,0)
		AND COALESCE(File.`userId`,0) = COALESCE(paramuserId,File.`userId`,0)
		AND COALESCE(File.`fileName`,'') = COALESCE(paramfileName,File.`fileName`,'')
		AND COALESCE(File.`uploadIP`,'') = COALESCE(paramuploadIP,File.`uploadIP`,'')
		AND COALESCE(CAST(File.`uploadDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramuploadDate AS DATE),CAST(File.`uploadDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(File.`fileSize`,0) = COALESCE(paramfileSize,File.`fileSize`,0)
		AND COALESCE(File.`fileExtension`,'') = COALESCE(paramfileExtension,File.`fileExtension`,'')
		AND COALESCE(File.`fileType`,'') = COALESCE(paramfileType,File.`fileType`,'')
		AND COALESCE(File.`isPublic`,0) = COALESCE(paramisPublic,File.`isPublic`,0)
		AND COALESCE(File.`categoryTypeId`,0) = COALESCE(paramcategoryTypeId,File.`categoryTypeId`,0);
END //
DELIMITER ;


