/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			6/24/2018
Description:	Creates the Song table and respective stored procedures

*/


USE tafers;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `tafers`.`Song`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Song_Load`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Song_LoadAll`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Song_Add`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Song_Update`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Song_Delete`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_Song_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `tafers`.`Song` (
id INT,
name VARCHAR(255),
description VARCHAR(4096),
createdByUserId INT,
imgUrl VARCHAR(512),
fileUrl VARCHAR(512),
createDate DATETIME,
CONSTRAINT pk_Song_id PRIMARY KEY (id),
CONSTRAINT fk_Song_createdByUserId_User_id FOREIGN KEY (createdByUserId) REFERENCES User (id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Song_Load`
(
	 IN paramid INT
)
BEGIN
	SELECT
		`Song`.`id` AS `id`,
		`Song`.`name` AS `name`,
		`Song`.`description` AS `description`,
		`Song`.`createdByUserId` AS `createdByUserId`,
		`Song`.`imgUrl` AS `imgUrl`,
		`Song`.`fileUrl` AS `fileUrl`,
		`Song`.`createDate` AS `createDate`
	FROM `Song`
	WHERE 		`Song`.`id` = paramid;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Song_LoadAll`
()
BEGIN
	SELECT
		`Song`.`id` AS `id`,
		`Song`.`name` AS `name`,
		`Song`.`description` AS `description`,
		`Song`.`createdByUserId` AS `createdByUserId`,
		`Song`.`imgUrl` AS `imgUrl`,
		`Song`.`fileUrl` AS `fileUrl`,
		`Song`.`createDate` AS `createDate`
	FROM `Song`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Song_Add`
(
	 IN paramname VARCHAR(255),
	 IN paramdescription VARCHAR(4096),
	 IN paramcreatedByUserId INT,
	 IN paramimgUrl VARCHAR(512),
	 IN paramfileUrl VARCHAR(512),
	 IN paramcreateDate DATETIME
)
BEGIN
	INSERT INTO `Song` (name,description,createdByUserId,imgUrl,fileUrl,createDate)
	VALUES (paramname, paramdescription, paramcreatedByUserId, paramimgUrl, paramfileUrl, paramcreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Song_Update`
(
	IN paramid INT,
	IN paramname VARCHAR(255),
	IN paramdescription VARCHAR(4096),
	IN paramcreatedByUserId INT,
	IN paramimgUrl VARCHAR(512),
	IN paramfileUrl VARCHAR(512),
	IN paramcreateDate DATETIME
)
BEGIN
	UPDATE `Song`
	SET name = paramname
		,description = paramdescription
		,createdByUserId = paramcreatedByUserId
		,imgUrl = paramimgUrl
		,fileUrl = paramfileUrl
		,createDate = paramcreateDate
	WHERE		`Song`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Song_Delete`
(
	IN paramid INT
)
BEGIN
	DELETE FROM `Song`
	WHERE		`Song`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_Song_Search`
(
	IN paramid INT,
	IN paramname VARCHAR(255),
	IN paramdescription VARCHAR(4096),
	IN paramcreatedByUserId INT,
	IN paramimgUrl VARCHAR(512),
	IN paramfileUrl VARCHAR(512),
	IN paramcreateDate DATETIME
)
BEGIN
	SELECT
		`Song`.`id` AS `id`,
		`Song`.`name` AS `name`,
		`Song`.`description` AS `description`,
		`Song`.`createdByUserId` AS `createdByUserId`,
		`Song`.`imgUrl` AS `imgUrl`,
		`Song`.`fileUrl` AS `fileUrl`,
		`Song`.`createDate` AS `createDate`
	FROM `Song`
	WHERE
		COALESCE(Song.`id`,0) = COALESCE(paramid,Song.`id`,0)
		AND COALESCE(Song.`name`,'') = COALESCE(paramname,Song.`name`,'')
		AND COALESCE(Song.`description`,'') = COALESCE(paramdescription,Song.`description`,'')
		AND COALESCE(Song.`createdByUserId`,0) = COALESCE(paramcreatedByUserId,Song.`createdByUserId`,0)
		AND COALESCE(Song.`imgUrl`,'') = COALESCE(paramimgUrl,Song.`imgUrl`,'')
		AND COALESCE(Song.`fileUrl`,'') = COALESCE(paramfileUrl,Song.`fileUrl`,'')
		AND COALESCE(CAST(Song.`createDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramcreateDate AS DATE),CAST(Song.`createDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


