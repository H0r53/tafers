/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			6/24/2018
Description:	Creates the SongComment table and respective stored procedures

*/


USE tafers;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `tafers`.`SongComment`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_SongComment_Load`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_SongComment_LoadAll`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_SongComment_Add`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_SongComment_Update`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_SongComment_Delete`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_SongComment_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `tafers`.`SongComment` (
id INT AUTO_INCREMENT,
songId INT,
userId INT,
comment VARCHAR(1024),
createDate DATETIME,
CONSTRAINT pk_SongComment_id PRIMARY KEY (id),
CONSTRAINT fk_SongComment_songId_Song_id FOREIGN KEY (songId) REFERENCES Song (id),
CONSTRAINT fk_SongComment_userId_User_id FOREIGN KEY (userId) REFERENCES User (id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_SongComment_Load`
(
	 IN paramid INT
)
BEGIN
	SELECT
		`SongComment`.`id` AS `id`,
		`SongComment`.`songId` AS `songId`,
		`SongComment`.`userId` AS `userId`,
		`SongComment`.`comment` AS `comment`,
		`SongComment`.`createDate` AS `createDate`
	FROM `SongComment`
	WHERE 		`SongComment`.`id` = paramid;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tafers`.`usp_SongComment_LoadAll`
()
BEGIN
	SELECT
		`SongComment`.`id` AS `id`,
		`SongComment`.`songId` AS `songId`,
		`SongComment`.`userId` AS `userId`,
		`SongComment`.`comment` AS `comment`,
		`SongComment`.`createDate` AS `createDate`
	FROM `SongComment`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tafers`.`usp_SongComment_Add`
(
	 IN paramsongId INT,
	 IN paramuserId INT,
	 IN paramcomment VARCHAR(1024),
	 IN paramcreateDate DATETIME
)
BEGIN
	INSERT INTO `SongComment` (songId,userId,comment,createDate)
	VALUES (paramsongId, paramuserId, paramcomment, paramcreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_SongComment_Update`
(
	IN paramid INT,
	IN paramsongId INT,
	IN paramuserId INT,
	IN paramcomment VARCHAR(1024),
	IN paramcreateDate DATETIME
)
BEGIN
	UPDATE `SongComment`
	SET songId = paramsongId
		,userId = paramuserId
		,comment = paramcomment
		,createDate = paramcreateDate
	WHERE		`SongComment`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_SongComment_Delete`
(
	IN paramid INT
)
BEGIN
	DELETE FROM `SongComment`
	WHERE		`SongComment`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_SongComment_Search`
(
	IN paramid INT,
	IN paramsongId INT,
	IN paramuserId INT,
	IN paramcomment VARCHAR(1024),
	IN paramcreateDate DATETIME
)
BEGIN
	SELECT
		`SongComment`.`id` AS `id`,
		`SongComment`.`songId` AS `songId`,
		`SongComment`.`userId` AS `userId`,
		`SongComment`.`comment` AS `comment`,
		`SongComment`.`createDate` AS `createDate`
	FROM `SongComment`
	WHERE
		COALESCE(SongComment.`id`,0) = COALESCE(paramid,SongComment.`id`,0)
		AND COALESCE(SongComment.`songId`,0) = COALESCE(paramsongId,SongComment.`songId`,0)
		AND COALESCE(SongComment.`userId`,0) = COALESCE(paramuserId,SongComment.`userId`,0)
		AND COALESCE(SongComment.`comment`,'') = COALESCE(paramcomment,SongComment.`comment`,'')
		AND COALESCE(CAST(SongComment.`createDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramcreateDate AS DATE),CAST(SongComment.`createDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


