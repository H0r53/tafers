/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen 
Date:			3/5/2018
Description:	Creates the User table and respective stored procedures

*/


USE tafers;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `tafers`.`User`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_User_Load`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_User_LoadAll`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_User_Add`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_User_Update`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_User_Delete`;
DROP PROCEDURE IF EXISTS `tafers`.`usp_User_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `tafers`.`User` (
id INT AUTO_INCREMENT,
username VARCHAR(255),
password VARCHAR(255),
email VARCHAR(512),
imgUrl VARCHAR(512),
createDate DATETIME,
roleId INT,
CONSTRAINT pk_User_id PRIMARY KEY (id),
CONSTRAINT fk_User_roleId_Role_id FOREIGN KEY (roleId) REFERENCES Role (id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_User_Load`
(
	 IN paramid INT
)
BEGIN
	SELECT
		`User`.`id` AS `id`,
		`User`.`username` AS `username`,
		`User`.`password` AS `password`,
		`User`.`email` AS `email`,
		`User`.`imgUrl` AS `imgUrl`,
		`User`.`createDate` AS `createDate`,
		`User`.`roleId` AS `roleId`
	FROM `User`
	WHERE 		`User`.`id` = paramid;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tafers`.`usp_User_LoadAll`
()
BEGIN
	SELECT
		`User`.`id` AS `id`,
		`User`.`username` AS `username`,
		`User`.`password` AS `password`,
		`User`.`email` AS `email`,
		`User`.`imgUrl` AS `imgUrl`,
		`User`.`createDate` AS `createDate`,
		`User`.`roleId` AS `roleId`
	FROM `User`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `tafers`.`usp_User_Add`
(
	 IN paramusername VARCHAR(255),
	 IN parampassword VARCHAR(255),
	 IN paramemail VARCHAR(512),
	 IN paramimgUrl VARCHAR(512),
	 IN paramcreateDate DATETIME,
	 IN paramroleId INT
)
BEGIN
	INSERT INTO `User` (username,password,email,imgUrl,createDate,roleId)
	VALUES (paramusername, parampassword, paramemail, paramimgUrl, paramcreateDate, paramroleId);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_User_Update`
(
	IN paramid INT,
	IN paramusername VARCHAR(255),
	IN parampassword VARCHAR(255),
	IN paramemail VARCHAR(512),
	IN paramimgUrl VARCHAR(512),
	IN paramcreateDate DATETIME,
	IN paramroleId INT
)
BEGIN
	UPDATE `User`
	SET username = paramusername
		,password = parampassword
		,email = paramemail
		,imgUrl = paramimgUrl
		,createDate = paramcreateDate
		,roleId = paramroleId
	WHERE		`User`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_User_Delete`
(
	IN paramid INT
)
BEGIN
	DELETE FROM `User`
	WHERE		`User`.`id` = paramid;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `tafers`.`usp_User_Search`
(
	IN paramid INT,
	IN paramusername VARCHAR(255),
	IN parampassword VARCHAR(255),
	IN paramemail VARCHAR(512),
	IN paramimgUrl VARCHAR(512),
	IN paramcreateDate DATETIME,
	IN paramroleId INT
)
BEGIN
	SELECT
		`User`.`id` AS `id`,
		`User`.`username` AS `username`,
		`User`.`password` AS `password`,
		`User`.`email` AS `email`,
		`User`.`imgUrl` AS `imgUrl`,
		`User`.`createDate` AS `createDate`,
		`User`.`roleId` AS `roleId`
	FROM `User`
	WHERE
		COALESCE(User.`id`,0) = COALESCE(paramid,User.`id`,0)
		AND COALESCE(User.`username`,'') = COALESCE(paramusername,User.`username`,'')
		AND COALESCE(User.`password`,'') = COALESCE(parampassword,User.`password`,'')
		AND COALESCE(User.`email`,'') = COALESCE(paramemail,User.`email`,'')
		AND COALESCE(User.`imgUrl`,'') = COALESCE(paramimgUrl,User.`imgUrl`,'')
		AND COALESCE(CAST(User.`createDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramcreateDate AS DATE),CAST(User.`createDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(User.`roleId`,0) = COALESCE(paramroleId,User.`roleId`,0);
END //
DELIMITER ;


